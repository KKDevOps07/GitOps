pipeline {
    agent any
    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Select Terraform action'
        )
    }

    environment {
        TF_IN_AUTOMATION       = "true"
        TF_VAR_aws_access_key  = credentials('aws_access_key')
        TF_VAR_aws_secret_key  = credentials('aws_secret_key')
        TF_VAR_public_key      = credentials('kk_public_key')
    }

    stages {
        stage('Prepare SSH Key') {
            steps {
                withCredentials([string(credentialsId: 'kk_private_key', variable: 'PRIVATE_KEY_CONTENT')]) {
                    sh '''
                        echo "$PRIVATE_KEY_CONTENT" | sed 's/\\\\n/\\n/g' > ${WORKSPACE}/kk_private.pem
                        chmod 600 ${WORKSPACE}/kk_private.pem
                    '''
                    script {
                        env.TF_VAR_private_key_path = "${WORKSPACE}/kk_private.pem"
                    }
                }
            }
        }

        stage('Debug Key') {
            steps {
                sh '''
                    echo "==== First 3 lines of PEM file ===="
                    head -3 ${TF_VAR_private_key_path}
                '''
            }
        }

        stage('Clone Repository') {
            steps {
                git credentialsId: 'Githubaccess', url: 'https://github.com/KKDevOps07/GitOps.git', branch: 'master'
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') { sh 'terraform init' }
            }
        }

        stage('Terraform Plan') {
            when { expression { params.ACTION == 'apply' } }
            steps {
                dir('terraform') { sh 'terraform plan -out=tfplan' }
            }
        }

        stage('Terraform Apply/Destroy') {
            steps {
                dir('terraform') {
                    script {
                        if (params.ACTION == 'apply') {
                            sh 'terraform apply -auto-approve tfplan'
                        } else {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'rm -f ${WORKSPACE}/kk_private.pem'
            echo "Terraform ${params.ACTION} pipeline complete"
        }
    }
}
// Jenkinsfile for Terraform GitOps pipeline
// This Jenkinsfile defines a pipeline that performs Terraform operations based on user input.